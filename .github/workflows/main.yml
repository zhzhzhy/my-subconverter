name: Deploy to okteto
on:
  push:
    branches:
    - main
    paths-ignore:
    - README.md
    - LICENSE

    tags:
    - v*

  pull_request:
    paths-ignore: 
    - README.md
    - LICENSE
  schedule:
  - cron: '0 0/12 * * ?'
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Run tests
      run: |
        if [ -f docker-compose.test.yml ]; then
          docker-compose --file docker-compose.test.yml build
          docker-compose --file docker-compose.test.yml run sut
        else
          docker build . --file Dockerfile
        fi
  push:
    needs: test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build image
      run: | 
        repository="${{github.repository}}"
        arr=(${repository//// })
        IMAGE_NAME=${arr[1]}
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        docker build . --file Dockerfile --tag $IMAGE_NAME

    - name: Log To Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
      run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "main" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
        echo "IMAGE_VERSION=$VERSION" >> $GITHUB_ENV

        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
    - name: Generate k8s configuration
      run: |
        cat>k8s.yml<<END_TEXT
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: $IMAGE_NAME
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: $IMAGE_NAME
          template:
            metadata:
              labels:
                app: $IMAGE_NAME
            spec:
              containers:
              - image: $IMAGE_ID:$IMAGE_VERSION
                name: $IMAGE_NAME
                ports:
                - containerPort: 25500
                  protocol: "TCP"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: $IMAGE_NAME
          annotations:
            dev.okteto.com/auto-ingress: "true"
        spec:
          type: ClusterIP
          ports:
          - name: http
            port: 8080
            protocol: TCP
            targetPort: 25500
          selector:
            app: $IMAGE_NAME
        END_TEXT
    - name: Upload k8s configuration
      uses: actions/upload-artifact@v2
      with:
        name: configuration
        path: k8s.yml
  deploy:
    needs: push
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Login
      uses: okteto/login@master
      with:
        token: ${{ secrets.OKTETO_TOKEN }}
    - name: Activate namespace
      uses: okteto/namespace@master
      with:
        namespace: ${{ secrets.OKTETO_NAMESPACE }}
    - name: Download k8s configuration
      uses: actions/download-artifact@v2
      with:
        name: configuration
    - name: Deploy
      uses: okteto/apply@master
      with:
        manifest: k8s.yml
    - name: Clean artifact
      uses: geekyeggo/delete-artifact@v1
      with:
        name: configuration
